/** Code generated by EriLex */
package databook.edsl.googql;

import java.util.Arrays;

public class Evaluators {
	public java.lang.Object evaluate(
		final Object evaluate_param, 
		final java.util.Stack<String> nodes, 
		final java.lang.Integer counter, 
		final java.util.Map<String,Class> selects) {
		if(((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).subtrees[0].val).name.equals("use") && ((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).val).name.equals("query"))
		{
			final Object __this__=((erilex.data.generic.Tree)evaluate_param).subtrees[0];
			final databook.local.model.RDFServiceWrapper db=(databook.local.model.RDFServiceWrapper)NAT(((erilex.data.generic.Tree)evaluate_param).subtrees[1]);
			final Object actionHead=((erilex.data.generic.Tree)evaluate_param).subtrees[2];
			{			
	java.util.Stack<String> st = new java.util.Stack<String>();			
	// use LinkedHashMap to preserve order here			
	java.util.Map<String, Class> sel = new java.util.LinkedHashMap<String, Class>(); 			
	String whereClause = (String) evaluate(actionHead, st, 0, sel);			
	String sparql = "SELECT " + 			
		org.apache.commons.lang.StringUtils.join(sel.keySet(), ",") + 			
		" WHERE { " + whereClause + " }";			
	java.io.InputStream is = null;			
	try {			
		is = db.sparqlSelectQuery(sparql);			
		org.apache.commons.csv.CSVParser rd = new org.apache.commons.csv.CSVParser(new java.io.InputStreamReader(is));			
		java.util.List<String[]> list = Arrays.asList(rd.getAllValues());			
		return list;			
		/*Object r = list.get(0)[0];			
		if(ent.getValue().equals(java.net.URI.class)) {			
			r = new java.net.URI((String) r);			
		}			
		return r;*/			
	} catch (Exception e) {			
		org.apache.commons.logging.LogFactory.getLog("googql").error("googql error", e);			
	} finally {			
		try {			
			if(is != null) {			
				is.close();			
			}			
		} catch (Exception e1) {			
			org.apache.commons.logging.LogFactory.getLog("googql").error("googql error", e1);						
		}			
	}						
	return null;			
}
		}
		else 
		if(((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).subtrees[0].val).name.equals("follow") && ((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).val).name.equals("action"))
		{
			final Object __this__=((erilex.data.generic.Tree)evaluate_param).subtrees[0];
			final java.lang.String prop=(java.lang.String)NAT(((erilex.data.generic.Tree)evaluate_param).subtrees[1]);
			final Object action=((erilex.data.generic.Tree)evaluate_param).subtrees[2];
			{			
	String current = nodes.peek();			
	String next = "?var"+counter;			
	nodes.push(next);			
	String props = prop.equals("a") ? "a" : databook.utils.ModelUtils.bracket(prop);			
	return current+" "+props+" "+next+" .\n"+evaluate(action, nodes, counter+1, selects);			
}
		}
		else 
		if(((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).subtrees[0].val).name.equals("time") && ((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).val).name.equals("action"))
		{
			final Object __this__=((erilex.data.generic.Tree)evaluate_param).subtrees[0];
			final Object action=((erilex.data.generic.Tree)evaluate_param).subtrees[1];
			{			
	if(nodes.peek().startsWith("<")) {			
		throw new RuntimeException("cannot select a constant!");			
	}			
	selects.put(nodes.peek(), java.util.Date.class);			
	return evaluate(action, nodes, counter, selects);			
}
		}
		else 
		if(((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).subtrees[0].val).name.equals("number") && ((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).val).name.equals("action"))
		{
			final Object __this__=((erilex.data.generic.Tree)evaluate_param).subtrees[0];
			final Object action=((erilex.data.generic.Tree)evaluate_param).subtrees[1];
			{			
	if(nodes.peek().startsWith("<")) {			
		throw new RuntimeException("cannot select a constant!");			
	}			
	selects.put(nodes.peek(), java.lang.Double.class);			
	return evaluate(action, nodes, counter, selects);			
}
		}
		else 
		if(((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).subtrees[0].val).name.equals("back") && ((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).val).name.equals("action"))
		{
			final Object __this__=((erilex.data.generic.Tree)evaluate_param).subtrees[0];
			final Object action=((erilex.data.generic.Tree)evaluate_param).subtrees[1];
			{			
	String current = nodes.pop();			
	return evaluate(action, nodes, counter, selects);			
}
		}
		else 
		if(((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).subtrees[0].val).name.equals("uri") && ((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).val).name.equals("action"))
		{
			final Object __this__=((erilex.data.generic.Tree)evaluate_param).subtrees[0];
			final Object action=((erilex.data.generic.Tree)evaluate_param).subtrees[1];
			{			
	if(nodes.peek().startsWith("<")) {			
		throw new RuntimeException("cannot select a constant!");			
	}			
	selects.put(nodes.peek(), java.net.URI.class);			
	return evaluate(action, nodes, counter, selects);			
}
		}
		else 
		if(((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).subtrees[0].val).name.equals("string") && ((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).val).name.equals("action"))
		{
			final Object __this__=((erilex.data.generic.Tree)evaluate_param).subtrees[0];
			final Object action=((erilex.data.generic.Tree)evaluate_param).subtrees[1];
			{			
	if(nodes.peek().startsWith("<")) {			
		throw new RuntimeException("cannot select a constant!");			
	}			
	selects.put(nodes.peek(), java.lang.String.class);			
	return evaluate(action, nodes, counter, selects);			
}
		}
		else 
		if(((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).subtrees[0].val).name.equals("with") && ((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).val).name.equals("matchTail"))
		{
			final Object __this__=((erilex.data.generic.Tree)evaluate_param).subtrees[0];
			final java.lang.String val=(java.lang.String)NAT(((erilex.data.generic.Tree)evaluate_param).subtrees[1]);
			final Object action=((erilex.data.generic.Tree)evaluate_param).subtrees[2];
			{			
	return val+" .\n"+evaluate(action, nodes, counter, selects);			
}
		}
		else 
		if(((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).subtrees[0].val).name.equals("sel") && ((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).val).name.equals("action"))
		{
			final Object __this__=((erilex.data.generic.Tree)evaluate_param).subtrees[0];
			final Object action=((erilex.data.generic.Tree)evaluate_param).subtrees[1];
			{			
	if(nodes.peek().startsWith("<")) {			
		throw new RuntimeException("cannot select a constant!");			
	}			
	selects.put(nodes.peek(), java.lang.Object.class);			
	return evaluate(action, nodes, counter, selects);			
}
		}
		else 
		if(((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).subtrees[0].val).name.equals("end") && ((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).val).name.equals("action"))
		{
			final Object __this__=((erilex.data.generic.Tree)evaluate_param).subtrees[0];
			{			
	return "";			
}
		}
		else 
		if(((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).subtrees[0].val).name.equals("node") && ((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).val).name.equals("actionHead"))
		{
			final Object __this__=((erilex.data.generic.Tree)evaluate_param).subtrees[0];
			final java.net.URI uri=(java.net.URI)NAT(((erilex.data.generic.Tree)evaluate_param).subtrees[1]);
			final Object action=((erilex.data.generic.Tree)evaluate_param).subtrees[2];
			{			
	nodes.push(databook.utils.ModelUtils.bracket(uri.toString()));			
	return evaluate(action, nodes, counter, selects);			
}
		}
		else 
		if(((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).subtrees[0].val).name.equals("integer") && ((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).val).name.equals("action"))
		{
			final Object __this__=((erilex.data.generic.Tree)evaluate_param).subtrees[0];
			final Object action=((erilex.data.generic.Tree)evaluate_param).subtrees[1];
			{			
	if(nodes.peek().startsWith("<")) {			
		throw new RuntimeException("cannot select a constant!");			
	}			
	selects.put(nodes.peek(), java.lang.Integer.class);			
	return evaluate(action, nodes, counter, selects);			
}
		}
		else 
		if(((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).subtrees[0].val).name.equals("match") && ((erilex.tree.ASTValueData)((erilex.data.generic.Tree)evaluate_param).val).name.equals("action"))
		{
			final Object __this__=((erilex.data.generic.Tree)evaluate_param).subtrees[0];
			final java.lang.String prop=(java.lang.String)NAT(((erilex.data.generic.Tree)evaluate_param).subtrees[1]);
			final Object matchTail=((erilex.data.generic.Tree)evaluate_param).subtrees[2];
			{			
	String current = nodes.peek();			
	String props = prop.equals("a") ? "a" : databook.utils.ModelUtils.bracket(prop);			
	return current+" "+props+" "+evaluate(matchTail, nodes, counter, selects);			
}
		}
		else 
			return ((java.lang.Object) evaluate_param) ;
	}
	public java.lang.Object NAT(
		final java.lang.Object tree) {
		return ((erilex.tree.ASTValueData) ((erilex.data.generic.Tree) tree) .val) .obj;
	}
}
